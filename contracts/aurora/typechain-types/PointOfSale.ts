/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PointOfSaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchReturn"
      | "batchWithdraw"
      | "getOrder"
      | "nonceCounter"
      | "orders"
      | "owner"
      | "payWithERC20"
      | "removeTokenFromWhitelist"
      | "tokenWhitelist"
      | "whitelistToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ItemReturned"
      | "OrderReceived"
      | "TokenRemovedFromWhitelist"
      | "TokenWhitelisted"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchReturn",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdraw",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payWithERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonceCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payWithERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
}

export namespace ItemReturnedEvent {
  export type InputTuple = [
    sender: AddressLike,
    amountRefunded: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    amountRefunded: bigint,
    nonce: bigint
  ];
  export interface OutputObject {
    sender: string;
    amountRefunded: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderReceivedEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    nonce: BigNumberish,
    isERC20: boolean,
    tokenAddress: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    amount: bigint,
    nonce: bigint,
    isERC20: boolean,
    tokenAddress: string
  ];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    nonce: bigint;
    isERC20: boolean;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRemovedFromWhitelistEvent {
  export type InputTuple = [tokenAddress: AddressLike];
  export type OutputTuple = [tokenAddress: string];
  export interface OutputObject {
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWhitelistedEvent {
  export type InputTuple = [tokenAddress: AddressLike];
  export type OutputTuple = [tokenAddress: string];
  export interface OutputObject {
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    owner: AddressLike,
    amount: BigNumberish,
    tokenAddress: AddressLike
  ];
  export type OutputTuple = [
    owner: string,
    amount: bigint,
    tokenAddress: string
  ];
  export interface OutputObject {
    owner: string;
    amount: bigint;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PointOfSale extends BaseContract {
  connect(runner?: ContractRunner | null): PointOfSale;
  waitForDeployment(): Promise<this>;

  interface: PointOfSaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchReturn: TypedContractMethod<
    [orderIds: BigNumberish[], percentages: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchWithdraw: TypedContractMethod<
    [orderIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getOrder: TypedContractMethod<
    [_nonce: BigNumberish],
    [[string, bigint, bigint, boolean, boolean, string]],
    "view"
  >;

  nonceCounter: TypedContractMethod<[], [bigint], "view">;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, boolean, string] & {
        sender: string;
        amount: bigint;
        timestamp: bigint;
        nonce: bigint;
        refunded: boolean;
        isERC20: boolean;
        tokenAddress: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payWithERC20: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeTokenFromWhitelist: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenWhitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  whitelistToken: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchReturn"
  ): TypedContractMethod<
    [orderIds: BigNumberish[], percentages: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchWithdraw"
  ): TypedContractMethod<[orderIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [_nonce: BigNumberish],
    [[string, bigint, bigint, boolean, boolean, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "nonceCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, boolean, string] & {
        sender: string;
        amount: bigint;
        timestamp: bigint;
        nonce: bigint;
        refunded: boolean;
        isERC20: boolean;
        tokenAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payWithERC20"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeTokenFromWhitelist"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenWhitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistToken"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ItemReturned"
  ): TypedContractEvent<
    ItemReturnedEvent.InputTuple,
    ItemReturnedEvent.OutputTuple,
    ItemReturnedEvent.OutputObject
  >;
  getEvent(
    key: "OrderReceived"
  ): TypedContractEvent<
    OrderReceivedEvent.InputTuple,
    OrderReceivedEvent.OutputTuple,
    OrderReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRemovedFromWhitelist"
  ): TypedContractEvent<
    TokenRemovedFromWhitelistEvent.InputTuple,
    TokenRemovedFromWhitelistEvent.OutputTuple,
    TokenRemovedFromWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "TokenWhitelisted"
  ): TypedContractEvent<
    TokenWhitelistedEvent.InputTuple,
    TokenWhitelistedEvent.OutputTuple,
    TokenWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "ItemReturned(address,uint256,uint256)": TypedContractEvent<
      ItemReturnedEvent.InputTuple,
      ItemReturnedEvent.OutputTuple,
      ItemReturnedEvent.OutputObject
    >;
    ItemReturned: TypedContractEvent<
      ItemReturnedEvent.InputTuple,
      ItemReturnedEvent.OutputTuple,
      ItemReturnedEvent.OutputObject
    >;

    "OrderReceived(address,uint256,uint256,bool,address)": TypedContractEvent<
      OrderReceivedEvent.InputTuple,
      OrderReceivedEvent.OutputTuple,
      OrderReceivedEvent.OutputObject
    >;
    OrderReceived: TypedContractEvent<
      OrderReceivedEvent.InputTuple,
      OrderReceivedEvent.OutputTuple,
      OrderReceivedEvent.OutputObject
    >;

    "TokenRemovedFromWhitelist(address)": TypedContractEvent<
      TokenRemovedFromWhitelistEvent.InputTuple,
      TokenRemovedFromWhitelistEvent.OutputTuple,
      TokenRemovedFromWhitelistEvent.OutputObject
    >;
    TokenRemovedFromWhitelist: TypedContractEvent<
      TokenRemovedFromWhitelistEvent.InputTuple,
      TokenRemovedFromWhitelistEvent.OutputTuple,
      TokenRemovedFromWhitelistEvent.OutputObject
    >;

    "TokenWhitelisted(address)": TypedContractEvent<
      TokenWhitelistedEvent.InputTuple,
      TokenWhitelistedEvent.OutputTuple,
      TokenWhitelistedEvent.OutputObject
    >;
    TokenWhitelisted: TypedContractEvent<
      TokenWhitelistedEvent.InputTuple,
      TokenWhitelistedEvent.OutputTuple,
      TokenWhitelistedEvent.OutputObject
    >;

    "Withdrawal(address,uint256,address)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
